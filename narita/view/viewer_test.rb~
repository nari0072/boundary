# -*- coding: utf-8 -*-
require 'cairo'
require 'pseudoVASP'
class BoundaryView < Poscar
  attr_reader :atom_list, :scale

  def initialize(poscar_name)
    super(poscar_name)
    3.times{|i|
      3.times{|j|
        $lattice[i][j]=@lat_vec[i][j]*@whole_scale
      }
    }
    @atom_list = mk_lattice
  end

  # @pos_size, @pos are attr_reader in Poscar
  def mk_lattice
    atom_list=[]
    @pos_size.times{|i|
      pos1=[0.0,0.0,0.0]
      3.times {|j|
        3.times {|k|
          pos1[k]+=@pos[i][j].to_f*$lattice[j][k]
        }
      }
      atom_list << pos1
    }
    return atom_list
  end

  def display(file_name)
      width,height = 300,200
      r = 3
      
      surface = Cairo::SVGSurface.new('hg2.svg', width, height)
      context = Cairo::Context.new(surface)
      
      #backcolor
      context.set_source_rgb(0.8, 0.8, 0.8)
      context.rectangle(0, 0, width, height)
      context.fill
      
      #atomics
      context.set_source_rgb(1, 0, 0)
      for i in 2..5 do
          for j in 1..3 do
              context.circle( width*1/7*i , height*1/4*j, r)
              context.fill
  end
 end
