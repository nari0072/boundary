# -*- coding: utf-8 -*-
require 'cairo'
require 'scanf'

lines = File.readlines(ARGV[0])


lattice = []
lines[2..4].each{|line|
  lattice << line.scanf("%f %f %f\n")
}
p lattice

atom = []
lines[7..42].each{|line|
atom << line.scanf("%f %f %f\n")
}
p atom

exit

lines.each_with_index{|line,i|
  p line,i
}

exit
width,height = 400,300
cx,cy = width/2.0,height/2.0
r = 2
scale = 100

surface = Cairo::SVGSurface.new('hg2.svg', width, height)
context = Cairo::Context.new(surface)

#backcolor
context.set_source_rgb(0.9, 0.9, 0.9)
context.rectangle(0, 0, width, height)
context.fill

#atomic
context.set_source_rgb(1, 0, 0)
  for i in 6..9 do
  for j in 5..8 do
   context.circle( width*1/15*i , height*1/13*j, r)
    p width*1/15*i , height*1/13*j, r

   context.fill
  end
 end
exit

#coordinate
context.set_source_rgb(0, 0, 0)
  [[0,-3],[3,0]].each{|line|
      x,y=line[0],line[1]
      context.move_to(cx,cy)
      context.line_to(cx+x*scale,cy+y*scale)
      context.stroke
  }
  
context.show_page
surface.finish

#配列latticeで原子配置
=begin
p  screen_x = 700, screen_y = 500, radius = 3
cx,cy = screen_x/2.0,screen_y*2.0/3.0
@scale = 100
s1=0.1;
a,b=$lattice[0][0]*s1*scale,b=$lattice[1][1]*s1*scale;
p  a, b, cx, cy
context.set_source_rgb(0.5, 0.5, 0.5)
context.rectangle(cx-a/2.0,cy,cx-a/2.0, cy-b)
context.fill

context.set_source_rgb(1, 0, 0)
@atom_list.each{|pos|
x,y,z = pos[0],pos[1],pos[2]
context.arc(cx+x*s1*scale, cy+y*s1*scale, radius, 0, 2 * Math::PI)
context.fill
}
=end
