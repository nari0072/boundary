begin
  target_dir = File.readlines('./.hikirc')[0].chomp
rescue => e
  puts e
  exit
end
p target_dir

task :default do
  system 'rake -T'
end

desc "convert fig size"
task :convert do
  source = ARGV[2]
  scale = ARGV[1]
  target = File.join('figs',source)
  p command = "convert #{source} -resize #{scale}\% #{target}"
  system command
  exit
end

desc "sync hikis and figs to hiki directory"
task :sync do
  p dirnames=Dir.pwd.split('/')
  p basename = (dirnames[-1]=='hikis')? dirnames[-2] : dirnames[-1]
  p entries=Dir.entries('.')
  entries[2..-1].each{|source| #cp *.hiki
    next unless source.include?('.hiki')
    next if source.include?('.hikirc')
    p base = source.split('.')[0]
    name = (base==basename)? base : basename+'_'+base
    p target = File.join(target_dir,'text',name)
    FileUtils.cp(source,target,:verbose=>true)
  }
  p entries=Dir.entries('./figs') #cp files in figs
  entries[2..-1].each{|file|
    p source = File.join('./figs',file)
    p target = File.join(target_dir,'cache','attach',basename)
    FileUtils.cp(source,target,:verbose=>true)
  }
  exit
end

desc "For hiki Errno::ENOENT, Errno::EACCES"
task :chenv do
  p user = ENV['USER']
  system("sudo chmod -R a+w #{target_dir}")
  system("sudo chown -R #{user} #{target_dir}")
end

desc "self copy to hikiutils template directory"
task :self_copy do
  p cp_files=[['Rakefile','Rakefile_hiki_sync'],
            [File.join(ENV['HOME'],'.my_help','hiki_help.yml'),'hik_help.yml']]
  cp_files.each{|files|
    p source = File.join(Dir.pwd,'Rakefile')
    p target = File.join('/Users/bob/Github/hikiutils/lib/templates/',files[1])
    FileUtils.cp(source,target,:verbose=>true)
  }
end
